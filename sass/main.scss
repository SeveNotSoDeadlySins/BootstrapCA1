
@import "../node_modules/bootstrap/scss/functions";

$primary: green;
$gradient: #003329;
$h2white: #fcfcfc;

.test-class {
    color: red; // Add a test class to verify compilation
}

@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/mixins";

$custom-colors: (
    "tertiary": purple,
    "tertiary-light": rgb(196, 0, 196),
    "tertiary-dark": rgb(53, 1, 53)
);

$theme-colors: map-merge($theme-colors, $custom-colors);
@each $color, $value in $colors {
    .bg.-#{color}{
        background-color: $value
    }
    .bg.-#{color}-light{
        background-color: tint-color($value, 60%)
    }
        .bg.-#{color}-dark{
        background-color: shade-color($value, 20%)
    }
};

$custom-heights: (
  h-25: 25%,
  h-50: 50%,
  h-75: 75%,
  h-100: 100%,
  h-900: 950px,
  h-1084: 1084px
);

@mixin generate-heights($heights) {
    @each $key, $value in $heights {
      .#{$key} {
        height: $value;
      }
    }
  }
@include generate-heights($custom-heights);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

@mixin make-container($padding-x: $container-padding-x, $h: auto, $overflow-y: hidden) {
    width: 100%;
    background-color: red;
    padding-right: $padding-x;
    padding-left: $padding-x;
    margin-left: auto;
    margin-right: auto;
    height: $h;
    justify-content: center;
    align-items: center;
    display: flex;
    overflow: hidden; 
    position: relative; 
}


.custom-container {
    @include make-container($h: 1084px, $overflow-y: auto); // Default height for larger screens

    // Loop through breakpoints
    @each $breakpoint, $max-width in $container-max-widths {
        @media (max-width: $max-width) {
            @if $breakpoint == sm {
                @include make-container($h: 900px, $overflow-y: auto);
            } @else if $breakpoint == md {
                @include make-container($h: 750px, $overflow-y: auto);
            } @else if $breakpoint == lg {
                @include make-container($h: 600px, $overflow-y: auto);
            } @else if $breakpoint == xl {
                @include make-container($h: 500px, $overflow-y: auto);
            } @else if $breakpoint == xxl {
                @include make-container($h: 400px, $overflow-y: auto);
            }
        }
    }

    // Specific fallback for extra small screens
    @media (max-width: 576px) {
        @include make-container($h: auto, $overflow-y: visible);
    }
}


$container-xxl: (
    position: relative,    
    display: flex,  
    height: 1084px,           
    justify-content: center,
    align-items: center,
    overflow: hidden,
    min-height: 100px
);

@mixin parallexTitle($position: absolute) {
    position: $position; 
    font-size: 5em;
    color: #ffff;
    top: 60;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
    z-index: 10;  
}

@mixin parallexText($position: absolute, $start: 50) {
    position: $position; 
    font-size: 2em;
    width: 40%;
    color: #ffff;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
    z-index: 10;  
}

.parallexTitle {
    @include parallexTitle();
}

.parallexText {
    @include parallexText();
}

.paralleximg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    object-fit: cover; /* Ensures the image covers the container */
}

.paralleximg {
    @include make-parallax-img();
}

@mixin make-parallax-text() {
    position: absolute;
    font-size: 5em;
    color: #ffff;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
}

.parallextext {
    @include make-parallax-text();
}




@import "../node_modules/bootstrap/scss/bootstrap.scss";