
@import "../node_modules/bootstrap/scss/functions";
@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/mixins";

$custom-colors: (
    "tertiary": white,
    "tertiary-light": #e1ded4,
    "tertiary-middle": #f4f1eb,
    "tertiary-dark": rgb(53, 1, 53)
);


$theme-colors: (
  "primary": #0d6efd, 
  "secondary": #6c757d,
  "custom-blue": #0056b3,
  "custom-green": #28a745
);



@for $i from -5 through 9 {
    .top-#{$i * 10} {
        top: #{$i * 10%};
    }
    .end-#{$i * 10} {
        right: #{$i * 10%};
    }
}

$display-font-fmaily: 'League+Spartan', Arial, sans-serif;

$theme-colors: map-merge($theme-colors, $custom-colors);
@each $color, $value in $colors {
    .bg.-#{color}{
        background-color: $value
    }
    .bg.-#{color}-light{
        background-color: tint-color($value, 60%)
    }
        .bg.-#{color}-dark{
        background-color: shade-color($value, 20%)
    }
};

@mixin svg-icon($svg-path, $width: 16px, $height: 16px) {
  background-image: url($svg-path);
  background-size: $width $height;
  background-repeat: no-repeat;
  background-position: center;
}

.button-with-arrowR {
  @include svg-icon('../images/right-arrow-svgrepo-com.svg', 20px, 20px);
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #0d6efd;
  border: none;
  border-radius: 50%;
}

.button-with-arrowL {
  @include svg-icon('../images/right-arrow-svgrepo-com (1).svg', 20px, 20px);
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #0d6efd;
  border: none;
  border-radius: 50%;
}

$custom-spacers: (
  6: 4rem,
  7: 5rem,
  8: 6rem,
  9: 7rem,
  10: 8rem
);

@each $key, $value in $custom-spacers {
    .m-#{$key} {
      margin: $value !important;
    }
    .mt-#{$key} {
      margin-top: $value !important;
    }
    .mb-#{$key} {
      margin-bottom: $value !important;
    }
    .ms-#{$key} {
      margin-left: $value !important; /* Start margin */
    }
    .me-#{$key} {
      margin-right: $value !important; /* End margin */
    }
    .mx-#{$key} {
      margin-left: $value !important;
      margin-right: $value !important;
    }
    .my-#{$key} {
      margin-top: $value !important;
      margin-bottom: $value !important;
    }
  }
  

$custom-heights: (
  h-25: 25%,
  h-50: 50%,
  h-75: 75%,
  h-100: 100%,
  h-900: 950px,
  h-1084: 1084px,
  h-350: 350px
);

@mixin generate-heights($heights) {
    @each $key, $value in $heights {
      .#{$key} {
        height: $value;
      }
    }
}

@include generate-heights($custom-heights);

@for $i from 0 through 10 {
    .top-#{$i * 10} {
      top: #{$i * 10%};
    }
}

@mixin circle($size, $color, $position: absolute, $z-index: -1) {
    width: $size;
    height: $size;
    border-radius: 50%;
    background-color: $color;
    position: $position;
    z-index: $z-index;
    background: url('../images/IMG_20241218_105029_edit_191481109132215.jpg');; //Fix the image later probably make it bigger or get a new one
  }
  
  .circle-bg {
    @include circle(1500px, #343a40); 
    // top: -50px;
    // right: -1000px;
  
    @media (max-width: 768px) {
      @include circle(300px, #343a40);
      top: 0;
      right: 0;
    }
}

@mixin image-size($size) {
    width: $size;
    height: $size;
}

.large-image {
    @include image-size(700px);
}

  


$customer-container2: ();

$custom-utilities: (
	"rotate": (
		property: transform,
		class: rotate,
		values: (
			0: rotate(0deg),
			1: rotate(5deg),
			2: rotate(10deg),
			3: rotate(15deg),
		),
	),
	"custom-border-radius": (
		property: border-radius,
		class: br,
		values: (
			0: 0,
			1: $spacer * 0.5,
			2: $spacer,
			3: $spacer * 1.5,
			4: $spacer * 2,
			5: $spacer * 2.5,000
			6: $spacer * 3,
		),
	),
);
$customer-container2: map-merge($customer-container2, $custom-utilities);

// Step 1: Add a custom background color to the utility map
// $utilities: map-merge(
//     $utilities,
//     (
//       "background-color": (
//         property: background-color,
//         class: bg,
//         values: (
//           "blue": blue
//         )
//       )
//     )
//   );
  

  

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

@mixin make-container($padding-x: $container-padding-x, $h: auto, $overflow-y: hidden) {
    width: 100%;
    padding-right: $padding-x;
    padding-left: $padding-x;
    margin-left: auto;
    margin-right: auto;
    height: $h;
    justify-content: center;
    align-items: center;
    display: flex;
    overflow: hidden; 
    position: relative; 
}

// Making break points for the height of my custom conatiner
.custom-container {
    @include make-container($h: 100vh, $overflow-y: auto); // Default height for larger screens

    @each $breakpoint, $max-width in $container-max-widths {
        @media (max-width: $max-width) {
            @if $breakpoint == sm {
                @include make-container($h: 900px, $overflow-y: auto);
            } @else if $breakpoint == md {
                @include make-container($h: 750px, $overflow-y: auto);
            } @else if $breakpoint == lg {
                @include make-container($h: 600px, $overflow-y: auto);
            } @else if $breakpoint == xl {
                @include make-container($h: 500px, $overflow-y: auto);
            } @else if $breakpoint == xxl {
                @include make-container($h: 400px, $overflow-y: auto);
            }
        }
    }

    // Specific fallback for extra small screens
    @media (max-width: 540px) {
        @include make-container($h: auto, $overflow-y: visible);
    }
}

// @mixin parallexTitle($position: absolute) {
//     position: $position; 
//     font-size: 5em;
//     color: #ffff;
//     top: 60;
//     text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
//     z-index: 10;  
// }

// @mixin parallexText($position: absolute, $start: 50) {
//     position: $position; 
//     font-size: 2em;
//     width: 40%;
//     color: #ffff;
//     text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
//     z-index: 10;  
// }

// .parallexTitle {
//     @include parallexTitle();
// }

// .parallexText {
//     @include parallexText();
// }

// .paralleximg {
//     position: absolute;
//     top: 0;
//     left: 0;
//     width: 100%;
//     height: 100%;
//     pointer-events: none;
//     object-fit: cover; /* Ensures the image covers the container */
// }


// @mixin make-parallax-text() {
//     position: absolute;
//     font-size: 5em;
//     color: #ffff;
//     text-shadow: 2px 2px 4px rgba(0, 0, 0, .2);
// }

// .parallextext {
//     @include make-parallax-text();
// }




@import "../node_modules/bootstrap/scss/bootstrap.scss";